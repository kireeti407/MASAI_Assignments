// Sample order data for MongoDB operations
const orders = [
  {
    "order_id": 1,  
    "customer_name": "John Doe",
    "items": ["Laptop", "Mouse"],
    "total_amount": 65000,
    "order_status": "pending"
  },
  {
    "order_id": 2,
    "customer_name": "Jane Smith",
    "items": ["Headphones", "Charger"],
    "total_amount": 3000,
    "order_status": "shipped"
  },
  {
    "order_id": 3,
    "customer_name": "Alice Johnson",
    "items": ["Mobile Phone"],
    "total_amount": 20000,
    "order_status": "delivered"
  },
  {
    "order_id": 4,
    "customer_name": "Bob Brown",
    "items": ["Tablet", "Keyboard"],
    "total_amount": 15000,
    "order_status": "pending"
  },
  {
    "order_id": 5,
    "customer_name": "Chris Green",
    "items": ["Smartwatch"],
    "total_amount": 7000,
    "order_status": "shipped"
  }
];

// MongoDB Query Operations

// 1. Find all orders with order_status "shipped"
db.orders.find({ order_status: "shipped" });

// 2. Update the total_amount of order with order_id: 1 to 70000
db.orders.updateOne(
  { order_id: 1 },
  { $set: { total_amount: 70000 } }
);

// 3. Delete the order with order_id: 4
db.orders.deleteOne({ order_id: 4 });

// 4. Find the order with customer_name: "Alice Johnson"
db.orders.findOne({ customer_name: "Alice Johnson" });

// 5. Update the order_status of order with order_id: 2 to "delivered"
db.orders.updateOne(
  { order_id: 2 },
  { $set: { order_status: "delivered" } }
);

// 6. Find all orders with total_amount greater than or equal to 15000
db.orders.find({ total_amount: { $gte: 15000 } });

// 7. Find all orders sorted by total_amount in descending order
db.orders.find().sort({ total_amount: -1 });

// 8. Find orders with order_status "pending" and total_amount less than 20000
db.orders.find({
  order_status: "pending",
  total_amount: { $lt: 20000 }
});

// 9. Insert a new order
db.orders.insertOne({
  order_id: 6,
  customer_name: "David Wilson",
  items: ["Monitor", "Webcam"],
  total_amount: 25000,
  order_status: "pending"
});

// 10. Find only customer_name and total_amount fields for all orders
db.orders.find({}, { customer_name: 1, total_amount: 1, _id: 0 });

// 11. Find orders where items include "Laptop"
db.orders.find({
  items: { $in: ["Laptop"] }
});

// 12. Update total_amount of order with order_id: 3 to 22000
db.orders.updateOne(
  { order_id: 3 },
  { $set: { total_amount: 22000 } }
);

// 13. Delete all orders with order_status "delivered"
db.orders.deleteMany({ order_status: "delivered" });

// 14. Find first 3 orders using limit
db.orders.find().limit(3);

// 15. Skip first 2 orders and retrieve the rest
db.orders.find().skip(2);

// 16. Find shipped orders sorted by total_amount in ascending order
db.orders.find({ order_status: "shipped" }).sort({ total_amount: 1 });

// 17. Insert another new order
db.orders.insertOne({
  order_id: 7,
  customer_name: "Emma Davis",
  items: ["Printer", "Paper"],
  total_amount: 8000,
  order_status: "shipped"
});

// 18. Count orders with order_status "pending"
db.orders.countDocuments({ order_status: "pending" });

// 19. Find orders with total_amount between 5000 and 30000
db.orders.find({
  total_amount: { $gte: 5000, $lte: 30000 }
});

// 20. Find orders with customer_name starting with "J"
db.orders.find({
  customer_name: { $regex: "^J" }
});
