
// Insert the provided dataset into your MongoDB collections:

// Insert customers
db.customers.insertMany([
  { "_id": "C1001", "name": "Alice", "city": "New York" },
  { "_id": "C1002", "name": "Bob", "city": "Los Angeles" },
  { "_id": "C1003", "name": "Charlie", "city": "Chicago" },
  { "_id": "C1004", "name": "David", "city": "Houston" },
  { "_id": "C1005", "name": "Eve", "city": "Seattle" }
]);

// Insert orders
db.orders.insertMany([
  { "_id": 1, "customerId": "C1001", "amount": 500, "product": "Laptop" },
  { "_id": 2, "customerId": "C1002", "amount": 1200, "product": "Phone" },
  { "_id": 3, "customerId": "C1001", "amount": 300, "product": "Headphones" },
  { "_id": 4, "customerId": "C1003", "amount": 700, "product": "Monitor" },
  { "_id": 5, "customerId": "C1004", "amount": 400, "product": "Keyboard" },
  { "_id": 6, "customerId": "C1002", "amount": 800, "product": "Tablet" },
  { "_id": 7, "customerId": "C1005", "amount": 900, "product": "Smartwatch" }
]);

// 1. Find the total amount spent by each customer.
db.orders.aggregate([
  {
    $group: {
      _id: "$customerId",
      totalAmountSpent: { $sum: "$amount" }
    }
  }
]);

// 2. Retrieve order details along with corresponding customer information.
db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customerId",
      foreignField: "_id",
      as: "customer"
    }
  },
  {
    $unwind: "$customer"
  }
]);

// 3. Find orders where the amount is greater than Rs. 500.
db.orders.find({ amount: { $gt: 500 } });

// 4. Calculate the average order amount per customer.
db.orders.aggregate([
  {
    $group: {
      _id: "$customerId",
      avgOrderAmount: { $avg: "$amount" }
    }
  }
]);

// 5. Retrieve all orders with customer details, ensuring each order has an associated customer record.
db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customerId",
      foreignField: "_id",
      as: "customer"
    }
  },
  {
    $match: {
      "customer.0": { $exists: true }
    }
  }
]);

